name: Matter Linux OTA Provider build

on: push

jobs:
  build_prepare:
    name: Prepare build
    runs-on: ubuntu-22.04
    outputs:
      version: ${{ steps.version.outputs.version }}
      channel: ${{ steps.version.outputs.channel }}
    steps:
      - name: Checkout build repository
        uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0
      - name: Get version
        id: version
        shell: bash
        run: |
          version=$(echo "${{ github.ref }}" | awk -F"/" '{print $NF}')
          if [[ ! -z "${{ github.event.inputs.version }}" ]]; then
            version="${{ github.event.inputs.version }}"
          elif [[ "${version}" =~ (main|dev) ]]; then
            today="$(date --utc '+%Y-%m-%d')"
            midnight_timestamp="$(date --utc +%s --date=$today)"
            calver_date="$(date --utc --date=$today '+%Y.%-m.dev%-d')"
            commit_count="$(git rev-list --count --since=$midnight_timestamp HEAD)"
            commit_count="$(printf "%02d" ${commit_count})"
            version="${calver_date}${commit_count}"
          elif [[ "${{ github.ref }}" =~ ^refs/heads/ ]]; then
            today="$(date --utc '+%Y-%m-%d')"
            midnight_timestamp="$(date --utc +%s --date=$today)"
            calver_date="$(date --utc --date=$today '+%Y.%-m.dev%-d')"
            # Remove invalid chars
            localversion="${version}"
            localversion="${localversion//-/}"
            localversion="${localversion//_/}"
            version="${calver_date}+${localversion}"
          fi
          echo "Building version $version"
          echo "version=$version" >> "$GITHUB_OUTPUT"
      - name: Checkout submodules
        working-directory: ./connectedhomeip/
        run: scripts/checkout_submodules.py --shallow --platform linux
      - name: Apply patches
        working-directory: ./connectedhomeip/
        run: |
          patches=(../*.patch)
          if [ ! -e "${patches[0]}" ]
          then
              echo "No patches found"
              exit 0
          fi
          for patch in "${patches[@]}"
          do
              echo "Applying ${patch}"
              patch -p1 < $patch
          done
      - name: Bootstrap
        working-directory: ./connectedhomeip/
        run: bash scripts/bootstrap.sh -p build,linux
      - name: ZAP Code pre-generation
        working-directory: ./connectedhomeip/
        run: scripts/run_in_build_env.sh "scripts/codepregen.py ./zzz_pregenerated/"
      - name: Create Matter SDK tar
        run: |
          tar -caf ../connectedhomeip.tar.zst --exclude ./connectedhomeip/.environment --use-compress-program=zstdmt .
          mv ../connectedhomeip.tar.zst ./connectedhomeip.tar.zst
      - name: Store Matter SDK as artifact
        uses: actions/upload-artifact@v4
        with:
          name: matter-sdk-${{ github.run_id }}
          path: ./connectedhomeip.tar.zst

  build_linux_examples:
    name: Build example apps for Linux (${{ matrix.arch.name }})
    needs: build_prepare

    strategy:
      matrix:
        arch:
          - name: x86-64
            runner: ubuntu-22.04
            example-prefix: linux-x64-
          - name: aarch64
            runner: linux-arm64
            example-prefix: linux-arm64-
        include:
          - examples: >-
              ota-provider
            variant: -libnl-no-ble-no-wifi-no-thread-boringssl

    runs-on: ${{ matrix.arch.runner }}
    permissions:
      contents: write # for actions/upload-release-asset to upload release asset

    defaults:
      run:
        working-directory: ./connectedhomeip/

    container:
      image: ghcr.io/home-assistant-libs/chip-wheels/chip-wheels-builder:release
      volumes:
        - "/tmp/log_output:/tmp/test_logs"
      options: --sysctl "net.ipv6.conf.all.disable_ipv6=0
        net.ipv4.conf.all.forwarding=1 net.ipv6.conf.all.forwarding=1"

    steps:
      - name: Restore Matter SDK from artifacts
        uses: actions/download-artifact@v4
        with:
          name: matter-sdk-${{ github.run_id }}
      - name: Extract Matter SDK from tar
        working-directory: ./
        run: |
          apt update && apt install zstd
          rm -rf connectedhomeip/
          tar -xaf ./connectedhomeip.tar.zst --use-compress-program=zstdmt .
          git config --global --add safe.directory "*"
      - name: Bootstrap
        run: bash scripts/bootstrap.sh -p all,linux
      - name: Setup and run build
        run: |
          mkdir bin/
          ./scripts/examples/gn_build_example.sh \
              examples/ota-provider-app/linux/ \
              out/ \
              chip_project_config_include_dirs=\[\"//../../../..\"\] \
              chip_crypto=\"boringssl\" \
              chip_config_network_layer_ble=false \
              chip_enable_wifi=false \
              chip_enable_openthread=false \
              chip_exchange_node_id_logging=true \
              chip_mdns=\"minimal\" \
              chip_minmdns_default_policy=\"libnl\"
          cp out/chip-ota-provider-app bin/
      - name: Rename and strip symbols
        run: |
          for example in bin/*; do
              mv "${example}" "${example}-${{ matrix.arch.name }}"
          done
          for example in bin/*; do
              objcopy --only-keep-debug "${example}" "${example}.debug"
              strip --strip-debug "${example}"
              objcopy --add-gnu-debuglink="${example}.debug" "${example}"
          done
      - name: Upload binaries as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: chip-linux-example-apps-${{ matrix.arch.name }}
          path: |
            ./connectedhomeip/bin/
            !./connectedhomeip/bin/*.debug
      - name: Upload debug symbols as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: chip-linux-example-apps-debug-${{ matrix.arch.name }}
          path: |
            ./connectedhomeip/bin/*.debug
      - name: Upload binaries as release assets
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: ./connectedhomeip/bin/*

